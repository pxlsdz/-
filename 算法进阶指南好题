描述
给定一张 n(n≤20) 个点的带权无向图，点从 0~n-1 标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。

输入格式
第一行一个整数n。

接下来n行每行n个整数，其中第i行第j个整数表示点i到j的距离（一个不超过10^7的正整数，记为a[i,j]）。

对于任意的x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且 a[x,y]+a[y,z]>=a[x,z]。

输出格式

一个整数，表示最短Hamilton路径的长度。

样例输入

4
0 2 1 3
2 0 2 1
1 2 0 1
3 1 1 0
样例输出

4
样例解释

从0到3的Hamilton路径有两条，0-1-2-3和0-2-1-3。前者的长度为2+2+1=5，后者的长度为1+2+1=4

分析：
朴素做法为全排列肯定会超时，这时候需要神奇的状态压缩DP了。

我们要关注两个点：

1.哪些点被走过

2.最后停在哪一个点

比如

0 1 2 3  路径长度：18
0 2 1 3  路径长度：20

那么第二条路径直接可以忽略，不要添加的以后的状态去了
我们可以设DP[k][i]为状态为K停在i点的最短路径长度（k为二进制，比如0011，表示经过了0点和1点）
那么DP[state][i]=DP[state_k][k]+w[k][j],state_k需要满足包含 state去掉j点的状态，且必须需要包含k点。
代码
#include<bits/stdc++.h>
using namespace std;
int dp[(1<<20)+1][25];
int w[25][25];
int main()
{
	int n;
	scanf("%d",&n);
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
	{
		scanf("%d",&w[i][j]);
	}
	memset(dp,0x3f,sizeof(dp));
	dp[1][0]=0;
	
	for(int i=0;i<(1<<n);i++)
		for(int j=0;j<n;j++)
	{
		  if((i>>j)&1)
		  {
		  	for(int k=0;k<n;k++)
			{
				if((i-(1<<j))>>k&1)
				{
					dp[i][j]=min(dp[i][j],dp[i-(1<<j)][k]+w[k][j]);
				}
			}
		  }
	}
	cout<<dp[(1<<n)-1][n-1]<<endl;
	
    return 0;
}


